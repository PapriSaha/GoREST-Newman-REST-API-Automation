{
	"info": {
		"_postman_id": "709f3c56-0817-4765-a7e3-260f6973d783",
		"name": "GoRest-REST-API-Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25676466"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Create new user with valid email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email= pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(\"Email: \" +email);\r",
									"pm.environment.set(\"email\", email);\r",
									"\r",
									"var name= pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"console.log(\"Name: \" +name);\r",
									"pm.environment.set(\"name\", name);\r",
									"\r",
									"const genders = [\"male\", \"female\"];\r",
									"const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
									"pm.environment.set(\"gender\", randomGender);\r",
									"\r",
									"const status = [\"active\", \"inactive\"];\r",
									"const randomStatus = status[Math.floor(Math.random() * status.length)];\r",
									"pm.environment.set(\"status\", randomStatus);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"    console.log(jsonData.id);\r",
									"    \r",
									"    pm.test(\"Status Code is 201 - Created\", function(){\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    pm.test(\"You have successfully created the user\");\r",
									"\r",
									"    pm.test(\"Name Validation\", function () {\r",
									"        pm.expect(jsonData.name).to.equal(pm.environment.get(\"name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Email Validation\", function(){\r",
									"        pm.expect(jsonData.email).to.equal(pm.environment.get(\"email\"));\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Gender Validation\", function(){\r",
									"        pm.expect(jsonData.gender).to.equal(pm.environment.get(\"gender\"));\r",
									"    })\r",
									"    \r",
									"    pm.test(\"Status Validation\", function(){\r",
									"        pm.expect(jsonData.status).to.equal(pm.environment.get(\"status\"));\r",
									"    })\r",
									"    break;\r",
									"\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with registered email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422-Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Error message Validation for email field\", function(){\r",
									"        pm.expect(jsonData[0].field).to.equal(\"email\");\r",
									"        pm.expect(jsonData[0].message).to.equal(\"has already been taken\");\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with a blank or invalid Json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422- Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Error message validation\", function(){\r",
									"        pm.expect(jsonData[0].field).to.equal(\"email\");\r",
									"        pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"        pm.expect(jsonData[1].field).to.equal(\"name\");\r",
									"        pm.expect(jsonData[1].message).to.equal(\"can't be blank\");\r",
									"        pm.expect(jsonData[2].field).to.equal(\"gender\");\r",
									"        pm.expect(jsonData[2].message).to.equal(\"can't be blank, can be male of female\");\r",
									"        pm.expect(jsonData[3].field).to.equal(\"status\");\r",
									"        pm.expect(jsonData[3].message).to.equal(\"can't be blank\");\r",
									"\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"name\": \"\",\r\n    \"gender\": true,\r\n    \"status\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users without parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"  \r",
									"  case 200:\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    \r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users with valid parameter page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response Body return page 2\", function(){\r",
									"        pm.expect(pm.response.headers.get(\"x-pagination-page\")).to.equal(\"2\");\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users with invalid string  parameter page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"    \r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Response should be an empty array\", function(){\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=abcd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "abcd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users with invalid special char parameter page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"    \r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.test(\"Response should be an empty array\", function(){\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=###",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": ""
								}
							],
							"hash": "##"
						}
					},
					"response": []
				},
				{
					"name": "Get all users with invalid parameter gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"    \r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"Response body returns an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    break;\r",
									"   \r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?gender=trans",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "gender",
									"value": "trans"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Created User Existence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"    \r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"ID validation\", function(){\r",
									"        pm.expect(jsonData.id).to.equal(pm.environment.get(\"id\"));\r",
									"    });\r",
									"    pm.test(\"Name Validation\", function(){\r",
									"        pm.expect(jsonData.name).to.equal(pm.environment.get(\"name\"));\r",
									"    });\r",
									"    pm.test(\"Email Validation\", function(){\r",
									"        pm.expect(jsonData.email).to.equal(pm.environment.get(\"email\"));\r",
									"    });\r",
									"    pm.test(\"Gender Validation\", function(){\r",
									"        pm.expect(jsonData.gender).to.equal(pm.environment.get(\"gender\"));\r",
									"    });\r",
									"    pm.test(\"Status Validation\", function(){\r",
									"        pm.expect(jsonData.status).to.equal(pm.environment.get(\"status\"));\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"   \r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailable user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 404 - Not found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User with invalid string id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 404 - Not found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/abcd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"abcd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User with invalid special character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 404 - Not found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/&&&",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"&&&"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"You have successfully updated the user\");\r",
									"    \r",
									"    pm.test(\"Response body should not be null\", function(){\r",
									"        pm.expect(jsonData).is.not.null;\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 404:\r",
									"    pm.test(\"Not found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email= pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(\"UpdatedEmail: \" +email);\r",
									"pm.environment.set(\"updated_email\", email);\r",
									"\r",
									"var name= pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"console.log(\"UpdatedName: \" +name);\r",
									"pm.environment.set(\"updated_name\", name);\r",
									"\r",
									"const genders = [\"male\", \"female\"];\r",
									"const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
									"pm.environment.set(\"updated_gender\", randomGender);\r",
									"\r",
									"const status = [\"active\", \"inactive\"];\r",
									"const randomStatus = status[Math.floor(Math.random() * status.length)];\r",
									"pm.environment.set(\"updated_status\", randomStatus);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{updated_email}}\",\r\n    \"name\": \"{{updated_name}}\",\r\n    \"gender\":\"{{updated_gender}}\",\r\n    \"status\": \"{{updated_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Updated user with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Updated ID Validation\", function(){\r",
									"    pm.expect(jsonData.id).to.equal(pm.environment.get(\"id\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Updated Email Validation\", function(){\r",
									"    pm.expect(jsonData.email).to.equal(pm.environment.get(\"updated_email\"));\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Updated Name Validation\", function(){\r",
									"    pm.expect(jsonData.name).to.equal(pm.environment.get(\"updated_name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Updated Gender Validation\", function(){\r",
									"    pm.expect(jsonData.gender).to.equal(pm.environment.get(\"updated_gender\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Updated Status Validation\", function(){\r",
									"    pm.expect(jsonData.status).to.equal(pm.environment.get(\"updated_status\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400: \r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 404:\r",
									"    pm.test(\"Not found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update user with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"You have successfully updated the user\");\r",
									"    \r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"        pm.expect(jsonData).is.not.null;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Updated Email Validation\", function(){\r",
									"    pm.expect(jsonData.email).to.equal(pm.environment.get(\"updated_email\"));\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 404:\r",
									"    pm.test(\"Not found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email= pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(\"UpdatedEmail: \" +email);\r",
									"pm.environment.set(\"updated_email\", email);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{updated_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user with wrong field type in Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 400:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Error message Validation\", function(){\r",
									"        pm.expect(jsonData.message).to.equal(\"Error occurred while parsing request parameters\");\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 404:\r",
									"    pm.test(\"Not found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": {{updated_email}},\r\n    \"name\": {{updated_name}},\r\n    \"gender\":{{updated_gender}},\r\n    \"status\": {{updated_status}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user with a blank or invalid Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Error message Validation\", function(){\r",
									"        pm.expect(jsonData[0].field).to.equal(\"name\");\r",
									"        pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"        pm.expect(jsonData[1].field).to.equal(\"gender\");\r",
									"        pm.expect(jsonData[1].message).to.equal(\"can't be blank, can be male of female\");\r",
									"        pm.expect(jsonData[2].field).to.equal(\"status\");\r",
									"        pm.expect(jsonData[2].message).to.equal(\"can't be blank\");\r",
									"        pm.expect(jsonData[3].field).to.equal(\"email\");\r",
									"        pm.expect(jsonData[3].message).to.equal(\"is invalid\");\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									" \r",
									"    case 404:\r",
									"    pm.test(\"Not found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"Brandon21\",\r\n    \"gender\":true,\r\n    \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posts",
			"item": [
				{
					"name": "Create a user post with valid user id and valid Json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var title= pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"console.log(\"Title :\" + title);\r",
									"pm.environment.set(\"title\", title);\r",
									"\r",
									"var body= pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"console.log(\"Body:\" +body);\r",
									"pm.environment.set(\"body\", body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.environment.set(\"post_id\", jsonData.id);\r",
									"\r",
									"    pm.test(\"Status Code is 201 - Created\", function(){\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body ID value should not be null\", function(){\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response body return the requested Json data\", function(){\r",
									"        pm.expect(jsonData.title).to.equal(pm.environment.get(\"title\"));\r",
									"        pm.expect(jsonData.body).to.equal(pm.environment.get(\"body\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{title}}\",\r\n    \"body\":\"{{body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user post with valid user id and invalid Json body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"title\");\r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"    pm.expect(jsonData[1].field).to.equal(\"body\");\r",
									"    pm.expect(jsonData[1].message).to.equal(\"can't be blank\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"\",\r\n    \"body\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user post with valid user id without Json body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"title\");\r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"    pm.expect(jsonData[1].field).to.equal(\"body\");\r",
									"    pm.expect(jsonData[1].message).to.equal(\"can't be blank\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user post with invalid user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"user\");\r",
									"    pm.expect(jsonData[0].message).to.equal(\"must exist\");\r",
									"    pm.expect(jsonData[1].field).to.equal(\"user_id\");\r",
									"    pm.expect(jsonData[1].message).to.equal(\"is not a number\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"{{title}}\",\r\n    \"body\" : \"{{body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/&&/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"&&",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts with different pagination limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Assert pagination limit is 20\", function () {\r",
									"        pm.expect(jsonData.length).to.equal(20);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?per_page=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "per_page",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts with title contains 'auxilium'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response title matches string\", function () {\r",
									"        pm.expect(jsonData).to.include(\"auxilium\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?title=auxilium",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "title",
									"value": "auxilium"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts with body contains 'auxilium'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body matches string\", function () {\r",
									"        pm.expect(jsonData).to.include(\"auxilium\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request- 400\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?body=auxilium",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "auxilium"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts with body contains non existent word",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 400:\r",
									"\r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Response Body data is empty\", function(){\r",
									"        pm.expect(jsonData).to.include([]);\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?body=$%@#&",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "$%@"
								}
							],
							"hash": "&"
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts within valid page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body return page 7\", function(){\r",
									"        pm.expect(pm.response.headers.get(\"x-pagination-page\")).to.equal(\"7\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?page=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "page",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts using special character page number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 400:\r",
									"\r",
									"   var jsonData= pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should empty\", function(){\r",
									"        pm.expect(jsonData).to.include([]);\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?page=%$@",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "page",
									"value": "%$@"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts using letter page number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?page=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "page",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users posts using not existent page number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts?page=6000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "page",
									"value": "6000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts by using valid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body id matches post id\", function(){\r",
									"        pm.expect(jsonData.id).to.equal(pm.environment.get(\"post_id\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found-404\");\r",
									"    break;\r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts by using invalid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body matches error messages\", function(){\r",
									"        pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									" \r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/abcd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"abcd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch posts by using Valid user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body title and body should not be null\", function(){\r",
									"        pm.expect(jsonData.title).to.not.equal(null);\r",
									"        pm.expect(jsonData.body).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch posts by using never posted Valid user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/7497812/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"7497812",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch posts by using invalid user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"   var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/ABCD/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"ABCD",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user post with valid body by valid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var updated_title= pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"console.log(\"Updated Title: \" + updated_title);\r",
									"pm.environment.set(\"updated_title\", updated_title);\r",
									"\r",
									"var updated_body =pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"console.log(\"Updated Body: \" + updated_body);\r",
									"pm.environment.set(\"updated_body\", updated_body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"        pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"\r",
									"    break;\r",
									"    case 422:\r",
									"    \r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body matches error messages\", function(){\r",
									"        var jsonData= pm.response.json();\r",
									"        pm.expect(jsonData[0].field).to.equal(\"title\");\r",
									"        pm.expect(jsonData[0].message).to.equal(\"is too long (maximum is 200 characters)\");\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{updated_title}}\",\r\n    \"body\": \"{{updated_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user post with valid body by invalid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"        pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"One Title\",\r\n    \"body\": \"One body\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/@$",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"@$"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user post with invalid body by Valid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"        pm.expect(jsonData[0].field).to.equal(\"title\");\r",
									"        pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"\r",
									"        pm.expect(jsonData[1].field).to.equal(\"body\");\r",
									"        pm.expect(jsonData[1].message).to.equal(\"can't be blank\");\r",
									"\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"body\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user post without Json body by Valid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData= pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should show error messages\", function(){\r",
									"        pm.expect(jsonData).to.include();\r",
									"\r",
									"    });\r",
									"\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new feature on user post by Valid post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newfeature = pm.variables.replaceIn(\"{{$randomLoremWord}}\");\r",
									"console.log(\"New Feature: \" + newfeature);\r",
									"pm.environment.set(\"newfeature\", newfeature);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"New Feature should be appeared in Response Body\", function(){\r",
									"        pm.expect(jsonData.newFeature).to.equal(pm.environment.get(\"newfeature\")).is.exist;\r",
									"\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"newFeature\": \"{{newfeature}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "Post one comment using valid Json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var comment_name = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"console.log(\"Name: \" + comment_name);\r",
									"pm.environment.set(\"comment_name\", comment_name);\r",
									"\r",
									"var comment_email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(\"Email: \" + comment_email);\r",
									"pm.environment.set(\"comment_email\", comment_email);\r",
									"\r",
									"var comment_body = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"console.log(\"Body: \" + comment_body);\r",
									"pm.environment.set(\"comment_body\", comment_body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"comment_id\", jsonData.id);\r",
									"\r",
									"    pm.test(\"Status Code is 201 -Created\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"ID Validation - Should match the Json Request \", function(){\r",
									"        pm.expect(jsonData.id).to.equal(\"1234567899\");\r",
									"    });\r",
									"    pm.test(\"Response of name, email and body matches the Json Body\", function(){\r",
									"    pm.expect(jsonData.post_id).to.equal(pm.environment.get(\"post_id\"));\r",
									"    pm.expect(jsonData.name).to.equal(pm.environment.get(\"comment_name\"));\r",
									"    pm.expect(jsonData.email).to.equal(pm.environment.get(\"comment_email\"));\r",
									"    pm.expect(jsonData.body).to.equal(pm.environment.get(\"comment_body\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"id\":  1234567899,\r\n            \"post_id\": {{post_id}},\r\n            \"name\": \"{{comment_name}}\",\r\n            \"email\": \"{{comment_email}}\",\r\n            \"body\": \"{{comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using invalid Json without comment ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 201 - Created\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body matches the Json Body\", function(){\r",
									"    pm.expect(jsonData.post_id).to.equal(165428);\r",
									"    pm.expect(jsonData.name).to.equal(\"Miss Kimberly Rowe\");\r",
									"    pm.expect(jsonData.email).to.equal(\"Nicholaus_Collier@hotmail.com\");\r",
									"    pm.expect(jsonData.body).to.equal(\"Optio quam quisquam ipsum pariatur voluptas et. Quis adipisci ea consequatur officia rerum rerum quo.\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n           \"post_id\": 165428,\r\n           \"name\": \"Miss Kimberly Rowe\",\r\n           \"email\": \"Nicholaus_Collier@hotmail.com\",\r\n           \"body\": \"Optio quam quisquam ipsum pariatur voluptas et. Quis adipisci ea consequatur officia rerum rerum quo.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using invalid Json without post id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"post\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"must exist\");\r",
									"    pm.expect(jsonData[1].field).to.equal(\"post_id\");\r",
									"    pm.expect(jsonData[1].message).to.equal(\"is not a number\"); \r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"{{comment_name}}\",\r\n            \"email\": \"{{comment_email}}\",\r\n            \"body\": \"{{comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using invalid Json without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Name Field Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"name\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"post_id\": {{post_id}},\r\n            \"email\": \"{{comment_email}}\",\r\n            \"body\": \"{{comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using invalid Json without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Email Field Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"email\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank, is invalid\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"post_id\": {{post_id}},\r\n            \"name\": \"{{comment_name}}\",\r\n            \"body\": \"{{comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using invalid Json without body field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Body Field Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"body\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"post_id\": {{post_id}},\r\n            \"name\": \"{{comment_name}}\",\r\n            \"email\":\"{{comment_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one comment using with null Json Body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"post\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"must exist\");\r",
									"\r",
									"    pm.expect(jsonData[1].field).to.equal(\"post_id\"); \r",
									"    pm.expect(jsonData[1].message).to.equal(\"is not a number\");\r",
									"\r",
									"    pm.expect(jsonData[2].field).to.equal(\"name\"); \r",
									"    pm.expect(jsonData[2].message).to.equal(\"can't be blank\");\r",
									"\r",
									"    pm.expect(jsonData[3].field).to.equal(\"email\"); \r",
									"    pm.expect(jsonData[3].message).to.equal(\"can't be blank, is invalid\");\r",
									"\r",
									"    pm.expect(jsonData[4].field).to.equal(\"body\"); \r",
									"    pm.expect(jsonData[4].message).to.equal(\"can't be blank\");\r",
									"\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - Ok \", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null); \r",
									"    \r",
									"\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments with invalid endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 404:\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments using name parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body should match the Searched Name value\", function(){\r",
									"    pm.expect(jsonData[0].name).to.equal(pm.environment.get(\"comment_name\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?name={{comment_name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{comment_name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments using valid body parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response Body should match the Searched Body value\", function(){\r",
									"        pm.expect(jsonData[0].body).to.equal(pm.environment.get(\"comment_body\"));\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?body={{comment_body}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "{{comment_body}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments with body contains number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"Response Body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?body=1234567",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "1234567"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments with body contains Special character",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 400:\r",
									"\r",
									"    var jsonData =pm.response.text();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"Response Body is empty\", function(){\r",
									"        pm.expect(jsonData).to.include([]);\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?body=%&^%$123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "%"
								},
								{
									"key": "^%$123",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments within valid page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response Body returns all comments of page 30\", function(){\r",
									"    pm.expect(jsonData.length).to.equal(10);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body return page 30\", function(){\r",
									"    pm.expect(pm.response.headers.get(\"x-pagination-page\")).to.equal(\"30\");\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?page=30",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "page",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments within invalid page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"Response Body returns an empty array\", function(){\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?page=8000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "page",
									"value": "8000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments within valid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?id=127844",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "127844"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users comments within invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Response body should be an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?id=-10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Put One comment within valid Json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var updatedcomment_body = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"console.log(\"Updated Comment Body: \" + updatedcomment_body);\r",
									"pm.environment.set(\"updated_comment_body\", updatedcomment_body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Updated response of comment body matches Json request\", function(){\r",
									"        pm.expect(jsonData.body).to.equal(pm.environment.get(\"updated_comment_body\"));\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"post_id\":{{post_id}},\r\n            \"name\": \"{{comment_name}}\",\r\n            \"email\": \"{{comment_email}}\",\r\n            \"body\": \"{{updated_comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch One comment within valid Json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var updatedcomment_body = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"console.log(\"Updated Comment Body: \" + updatedcomment_body);\r",
									"pm.environment.set(\"updated_comment_body\", updatedcomment_body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Updated response of comment body matches Json request\", function(){\r",
									"        pm.expect(jsonData.body).to.equal(pm.environment.get(\"updated_comment_body\"));\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"body\": \"{{updated_comment_body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "todos",
			"item": [
				{
					"name": "Post one todos within valid Json by user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var todos_title = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"console.log(\"Todos Title: \" + todos_title);\r",
									"pm.environment.set(\"todos_title\", todos_title);\r",
									"\r",
									"var todos_dueon = pm.variables.replaceIn(\"{{$randomDateRecent}}\");\r",
									"console.log(\"Todos Due on: \" + todos_dueon);\r",
									"pm.environment.set(\"todos_dueon\", todos_dueon);\r",
									"\r",
									"const todos_status = [\"completed\", \"pending\"];\r",
									"const randomStatus = todos_status[Math.floor(Math.random() * todos_status.length)];\r",
									"pm.environment.set(\"todos_status\", randomStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"todos_id\", jsonData.id);\r",
									"\r",
									"    pm.test(\"Status Code is 201 -Created\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"ID Validation - Should match the Json Request \", function(){\r",
									"        pm.expect(jsonData.id).to.equal(\"69180\");\r",
									"    });\r",
									"    pm.test(\"Response of user_id, title, due_on and status matches the Json Body\", function(){\r",
									"    pm.expect(jsonData.user_id).to.equal(pm.environment.get(\"id\"));\r",
									"    pm.expect(jsonData.title).to.equal(pm.environment.get(\"todos_title\"));\r",
									"    let expectedDueDate = new Date(pm.environment.get(\"todos_dueon\"));\r",
									"    let actualDueDate = new Date(jsonData.due_on);\r",
									"    pm.expect(actualDueDate.toISOString()).to.equal(expectedDueDate.toISOString());\r",
									"    pm.expect(jsonData.status).to.equal(pm.environment.get(\"todos_status\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 69180,\r\n        \"user_id\": {{id}},\r\n        \"title\": \"{{todos_title}}\",\r\n        \"due_on\": \"{{todos_dueon}}\",\r\n        \"status\": \"{{todos_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos within invalid Json without todos id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"    pm.test(\"Status Code is 201 - Created\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response of user_id, title, due_on and status matches the Json Body\", function(){\r",
									"    pm.expect(jsonData.user_id).to.equal(7498851);\r",
									"    pm.expect(jsonData.title).to.equal(\"Dolorem possimus qui vero.\");\r",
									"    pm.expect(jsonData.due_on).to.equal(\"2024-10-30T09:58:14.000+05:30\");\r",
									"    pm.expect(jsonData.status).to.equal(\"completed\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"user_id\": 7498851,\r\n        \"title\": \"Dolorem possimus qui vero.\",\r\n        \"due_on\": \"2024-10-30T09:58:14.000+05:30\",\r\n        \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos within invalid Json without user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"user\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"must exist\");\r",
									"    pm.expect(jsonData[1].field).to.equal(\"user_id\");\r",
									"    pm.expect(jsonData[1].message).to.equal(\"is not a number\"); \r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\" : 123456,\r\n        \"title\": \"Dolorem possimus qui vero.\",\r\n        \"due_on\": \"2024-10-30T09:58:14.000+05:30\",\r\n        \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos within invalid Json without title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"title\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\" : 123456,\r\n        \"user_id\": 7498851,\r\n        \"due_on\": \"2024-10-30T09:58:14.000+05:30\",\r\n        \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos within invalid Json without due_on",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 201:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 201 - Created\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"    pm.test(\"Response Body Validation\", function(){\r",
									"    pm.expect(jsonData.user_id).to.equal(7498851); \r",
									"    pm.expect(jsonData.title).to.equal(\"Dolorem possimus qui vero.\");\r",
									"    pm.expect(jsonData.due_on).to.equal(null);\r",
									"    pm.expect(jsonData.status).to.equal(\"completed\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\" : 123456,\r\n        \"user_id\": 7498851,\r\n        \"title\": \"Dolorem possimus qui vero.\",\r\n        \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos within invalid Json without status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"status\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"can't be blank, can be pending or completed\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\" : 123456,\r\n        \"user_id\": 7498851,\r\n        \"title\": \"Dolorem possimus qui vero.\",\r\n        \"due_on\": \"2024-10-30T09:58:14.000+05:30\"\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post one todos with null Json body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 422:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 422 - Unprocessable Entity\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body Error Message Validation\", function(){\r",
									"    pm.expect(jsonData[0].field).to.equal(\"user\"); \r",
									"    pm.expect(jsonData[0].message).to.equal(\"must exist\");\r",
									"\r",
									"    pm.expect(jsonData[1].field).to.equal(\"title\"); \r",
									"    pm.expect(jsonData[1].message).to.equal(\"can't be blank\");\r",
									"\r",
									"    pm.expect(jsonData[2].field).to.equal(\"user_id\"); \r",
									"    pm.expect(jsonData[2].message).to.equal(\"is not a number\");\r",
									"\r",
									"    pm.expect(jsonData[3].field).to.equal(\"status\"); \r",
									"    pm.expect(jsonData[3].message).to.equal(\"can't be blank, can be pending or completed\");\r",
									"    });\r",
									"\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 404:\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos1234",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos within valid page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response Body returns all todos of page 40\", function(){\r",
									"    pm.expect(jsonData.length).to.equal(10);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body return page 40\", function(){\r",
									"    pm.expect(pm.response.headers.get(\"x-pagination-page\")).to.equal(\"40\");\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?page=40",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "page",
									"value": "40"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos within invalid page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.test(\"Response Body returns an empty array\", function(){\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?page=9000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "page",
									"value": "9000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos within valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body should not be null\", function(){\r",
									"    pm.expect(jsonData.value).to.not.equals(null);\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?id=65040",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "65040"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos within invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 400 - Bad Request\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Response body returns an empty array\", function(){\r",
									"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?id=-12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "-12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all user todos with title parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData =pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body should match the Searched Title value\", function(){\r",
									"    pm.expect(jsonData[0].title).to.equal(pm.environment.get(\"todos_title\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos?title={{todos_title}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{todos_title}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all user todos with due_on parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response Body should match the Searched Due on value\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let expectedDueDate = new Date(pm.environment.get(\"todos_dueon\"));\r",
									"    let actualDueDate = new Date(jsonData[0].due_on);\r",
									"\r",
									"    pm.expect(actualDueDate.toISOString()).to.equal(expectedDueDate.toISOString());\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos?due_on={{todos_dueon}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "{{todos_dueon}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all user todos with status parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"    \r",
									"    var jsonData= pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response Body should match the Searched Status value\", function () {\r",
									"    pm.expect(jsonData[0].status).to.equal(pm.environment.get(\"todos_status\"));\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"    \r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos?status={{todos_status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "status",
									"value": "{{todos_status}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Put one todos within valid Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Updated response of todos status matches Json Body request\", function(){\r",
									"        pm.expect(jsonData.status).to.equal(pm.environment.get(\"updated_todos_status\"));\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const updated_todos_status = [\"completed\", \"pending\"];\r",
									"const randomStatus = updated_todos_status[Math.floor(Math.random() * updated_todos_status.length)];\r",
									"pm.environment.set(\"updated_todos_status\", randomStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"user_id\": {{id}},\r\n        \"title\": \"{{todos_title}}\",\r\n        \"due_on\": \"{{todos_dueon}}\",\r\n        \"status\": \"{{updated_todos_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos/{{todos_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos",
								"{{todos_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch one todos within valid Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"\r",
									"    case 200:\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status Code is 200 - OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"   pm.test(\"Updated response of todos status matches Json Body request\", function(){\r",
									"        pm.expect(jsonData.status).to.equal(pm.environment.get(\"updated_todos_status\"));\r",
									"    });\r",
									"    \r",
									"    break;\r",
									"    \r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var updated_todos_dueon = pm.variables.replaceIn(\"{{$randomDateFuture}}\");\r",
									"console.log(\"Updated Todos Due on: \" + updated_todos_dueon);\r",
									"pm.environment.set(\"updated_todos_dueon\", updated_todos_dueon);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \r\n    \"due_on\": \"{{updated_todos_dueon}}\"\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todos/{{todos_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos",
								"{{todos_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "deleteMethod",
			"item": [
				{
					"name": "Delete one comment with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 204:\r",
									"\r",
									"    pm.test(\"Status Code is 204 - No Content\", function(){\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"    pm.test(\"You have successfully deleted the comment\");\r",
									"    \r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Response Body should show sucessfully comment deleted message\", function(){\r",
									"    pm.expect(jsonData).to.include(\"Deleted the comment successfully\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one comment with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response Body Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"123456"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User post by invalid post id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response Body Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/@@",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"@@"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User post by valid post id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 204:\r",
									"\r",
									"    pm.test(\"Status Code is 204 - No Content\", function(){\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"    pm.test(\"You have successfully deleted the post\");\r",
									"    \r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Response Body should show sucessfully post deleted message\", function(){\r",
									"    pm.expect(jsonData).to.include(\"Deleted the post successfully\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Available User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 204:\r",
									"\r",
									"    pm.test(\"Status Code is 204 - No Content\", function(){\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"    pm.test(\"You have successfully deleted the user\");\r",
									"    \r",
									"    var jsonData = pm.response.text();\r",
									"\r",
									"    pm.test(\"Response Body should show sucessfully deleted message\", function(){\r",
									"    pm.expect(jsonData).to.include(\"Deleted the user successfully\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"    \r",
									"    case 404:\r",
									"    pm.test(\"Not Found\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailable User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.code;\r",
									"\r",
									"switch(response){\r",
									"    case 404:\r",
									"\r",
									"    pm.test(\"Status Code is 404 - Not Found\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response Body Error message validation\", function(){\r",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\");\r",
									"    });\r",
									"\r",
									"    break;\r",
									"\r",
									"    case 400:\r",
									"    pm.test(\"Bad Request\");\r",
									"    break;\r",
									"\r",
									"    case 403:\r",
									"    pm.test(\"Forbidden\");\r",
									"    break;\r",
									"\r",
									"    case 405:\r",
									"    pm.test(\"Method not allowed -405\");\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"    pm.test(\"Internal Server Error- 500\");\r",
									"    break;\r",
									"\r",
									"    case 503:\r",
									"    pm.test(\"Service Unavailable-503\")\r",
									"    break;\r",
									"    default:\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "80e83da2ef6dca4073e4c36a2fda037c24c6389988f780ba61e62a60e15b7141",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}